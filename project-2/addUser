#!/bin/bash

# 'addUser' script does:
#   - It will create a new user account.
#   - User provide username as an argument with option '-u'.
#   - User specify which shell they want to use as an argument with option '-s'.
#   - User can provide other groupnames they want to add the user in as arguments with option '-g' 

# Initial empty variables.
# - these variables are initially empty and will be filled by functions success. 
# - This is an intentional setup to check wether the functions work or not in later steps in the script.
userName=
userHome=
userShell=
userId=
userGroups=()
# 'userName' will be fiiled with the user name if it is available.
# 'userHome' will be filled with the user's default home path if the user name is available.
# 'userShell' will be fiiled with the user specifed shell if it is a valid shell type.
# 'userId' will be filled with the user id that is availiable.
# 'userGroups' will be filled with the exist group names that user want to enroll.

# Function 'checkUserName'
# - This function check if the given parameter is available user name.
# - if it is available, it will update the variable 'userName' with the given parameter.
# - it also update variable 'userHome' with the default home path for the given parameter.
# - if not, it will return false.
checkUserName() {
    local name="$1"
    if grep -q "^${name}:" /etc/passwd; then
        echo "Username '${name}' already exists!"
        return 1
    else
        userName="$name"
        userHome="/home/${name}"
    fi
}
# It takes the first parameter in a local variable 'name'.
# It check if the 'name:' exist at the beginning of any lines in the /etc/passwd file.
#  -q: quitely check result with 0 or 1 without printing match data.
#   ^: search the data from beginning of lines. 
# If it exists:
# - print that is exist and return 1 (false).
# If not exists:
#  - update variable 'userName' with the value of variable 'name'.
#  - update variable 'userHome' with the path of the user 'name'.

# Function 'checkShell'
# - This function check if the given parameter is an available shell type.
# - if it is available, it will update the variable 'userShell' with the given parameter.
# - if not, it will return false.
# reference:
# - https://www.gnu.org/software/grep/manual/grep.html
checkShell() {
    local shell="$1"
    if grep -Fxq "${shell}" "/etc/shells"; then
        userShell="$shell"
    else
        echo "The '${shell}' is an invalid shell type!"
        return 1
    fi
}
# It takes the first parameter in a local variable 'shell'.
# It check if the 'shell' exist in the /etc/passwd file.
#  -F: fix the pattern 'shell' as a string.
#  -x: search as a line that exaclty matches with the 'shell'
# If it exists:
#  - that means the user shell is valid.
#  - update variable 'userShell' with the value of variable 'shell'.
# If not exists:
#  - print that is invalid type and return 1 (false).

# Function 'checkId'
# - This function find a number for the available user id and group id. 
# - it will check each number from 1000 up to maximum value of user id.
# - if it find an available number, it will break loop and will update the variable 'userId' with the number found.
# reference:
# - https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux
# - https://docs.linuxfoundation.org/lfx/project-control-center/v1-prior-version/tools/security/manage-false-positives/regular-expressions-cheat-sheet
checkId() {
    for (( num=1000; num<4294967295; num++ )); do
        if ! grep -q "^[^:]*:[^:]*:${num}:" /etc/passwd && ! grep -q "^[^:]*:[^:]*:${num}:" /etc/group ; then
            userId="$num"
            break
        fi
    done
}
# It loops through the numbers from 1000 to 4294967295 by adding up 1 after each time.
#  - Since user ids up to 999 are reserved for the system user, it will start from 1000.
#  - 4294967295 is the maximum number of user id in linux.
#  - user id 65534 is also reserved for user 'nobody', however it will automatically skip when it reaches the number because it exists.
#  - for each number, it will check: 
#    - if the number not exist in specific position (which means after three colons, can have any characters between colons) of the file '/etc/passwd' and '/etc/group'.
#      - ^: beginning point of line
#      - [^:]*:: any characters that is not ':', followed by ':'.
#      - update variable 'userId' with the value of variable 'num'.
#      - break the loop.

# Function 'checkGroups'
# - This function check if the given parameters are exist groups.
# - if it is exist, it will append the given parameter to the array variable 'userGroups'.
# - if not, it will print that does not exist.
checkGroups() {
    local groups=("$@")
    for group in "${groups[@]}"; do
        if grep -q "^${group}:" /etc/group; then
            if [[ ! "${userGroups[@]}" =~ "${group}" ]]; then
                userGroups+=("$group")
            fi
        else
            echo "Group name '${group}' does not exist."
        fi
    done
}
# It takes the multiple parameters in a local array variable 'groups'.
# It loops each group in the 'groups'.
# - if the 'group:' exist at the beginning of any lines in the /etc/group file:
#   - if that group not in the global array variable 'userGroup':
#       =~: compare 'group' is in 'userGroups[@]'
#       - append the value of variable 'group' to 'userGroups'.
# - If not exists:
#   - print that does not exist.

# Function 'mkHome'
# - This function check if the given parameter is an exist directory.
# - if it exists, it will skip. 
# - if not, it will make a directory with the given parameter.
mkHome() {
    local homePath="$1"
    if [[ ! -d "${homePath}" ]]; then
        mkdir "${homePath}"
    else
        echo "Home directory '${homePath}' already exists."
    fi
}
# It takes the first parameter in a local variable 'homePath'.
# It checks if the directory with the path of 'homePath' does not exist.
# - If not exists:
#   - make a directory with the path 'homePath'.
# - If it exists:
#   - print that exist.

# Function 'chownDir'
# - This function check if the first given parameter is an exist user and the secon given parameter is an exist user home directory.
# - if so, it will change ownership of the directory with the second given parameter to user and user's default group with the first given parameter.
# - if not, it will return false.
chownDir() {
    local name="$1"
    local path="$2"
    if grep -q "^${name}:" /etc/passwd && [[ -d "${path}" ]]; then
        chown -R "${name}:${name}" "${path}"
    else
        echo "changing '${path}'s ownership failed!"
        return 1
    fi
}
# It takes the first parameter in a local variable 'name'.
# It takes the second parameter in a local variable 'path'.
# It checks if the 'name:' exist at the beginning of any lines in the '/etc/passwd' file and if the directory 'path' exist.
# - If both are true:
#   - change ownership of the 'path' to the user 'name' and group 'name'
#       -R: to change ownership recursively of the path.
# - If false:
#   - print that request failed and return 1 (false).

# Function 'mkGroup'
# - This function check if the first given parameter is an exist group.
# - if it is exist, it will return false.
# - if not, it will append a new line to add a group with the first parameter and the second given parameter.
mkGroup(){
    local groupname="$1"
    local groupid="$2"
    if ! grep -q "^${groupname}:" /etc/group; then
        echo "${groupname}:x:${groupid}:" >> /etc/group
    else
        echo "Group name '${groupname}' already exists."
        return 1
    fi
}
# It takes the first parameter in a local variable 'groupname'.
# It takes the second parameter in a local variable 'groupid'.
# It checks if the 'groupname:' not exist at the beginning of any lines in the '/etc/group' file.
# - If not exists:
#   - append a new line with 'groupname' and 'groupid' in to the file '/etc/group'.
#     - this line will be a correct form of adding group in the file '/etc/group'.
# - If it exists:
#   - print that group name 'groupname' exists and return 1 (false).

# Function 'addUser'
# This function will add a new user to the file '/etc/passwd' with the given three parameters.
addUser(){
    local Name="$1"
    local ID="$2"
    local Shell="$3"
    local Path="/home/${Name}"
    echo "${Name}:x:${ID}:${ID}::${Path}:${Shell}" >> /etc/passwd
}
# It takes the first parameter in a local variable 'Name'.
# It takes the second parameter in a local variable 'ID'.
# It takes the third parameter in a local variable 'Shell'.
# It creates a local variable 'Path' with the variable 'Name'.
# It appends a new line with variables to the file '/etc/passwd'.
#   - this line will create a new user manually with correct format of information.
# Since this function only be used after checking all the other information given, no need to check error here.

# Function 'addGroups'
# This function takes multiple parameters.
# After first parameter, it will consider that as a group name and check if it exist.
# if so, it will add a 'user' to the 'group'.
# reference:
# - https://www.ibm.com/docs/en/aix/7.2?topic=s-sed-command
# - https://www.gnu.org/software/sed/manual/sed.html
# - https://stackoverflow.com/questions/17232526/how-to-pass-an-array-argument-to-the-bash-script
addGroups() {
    local user=$1
    local groups=("${@:2}")
    for group in "${groups[@]}"; do 
        local matchLine=$(grep "^${group}:" /etc/group)
        if [[ $matchLine ]]; then
            if [[ $matchLine =~ :$ ]]; then
                sed -i "s|^${matchLine}$|${matchLine}${user}|" /etc/group
            else
                sed -i "s|^${matchLine}$|${matchLine},${user}|" /etc/group
            fi
        else
            echo "Group '${group}' does not exist."
        fi
    done
}
# It takes the first parameter in a local variable 'user'.
# It takes parameters from the second position to the end in a local array variable 'groups'.
# - ${@}: every parameter that passed
# - :2: means starting index. since index starts from 1, '${@:2}' means from second parameters to the end. 
# It loops through group in 'groups'.
#   - It creates a local variable 'matchLine' that grep a line start with 'group:' in the 'etc/group' file.
#   - If match line exists:
#       - Check if the 'matchLine' line end with the ':'.
#       - if it end with ':':
#           - change the line 'matchLine' to the 'matchLine''user' and update the original file '/etc/group'.
#           - sed: find pattern and change text.
#           -  -i: update the original file.
#           - s|...|...|: substitute data in the left |...| to the data in the right |...|.
#       - if it not end with ':':
#           - change the line 'matchLine' to the 'matchLine' ',' 'user' and update the original file '/etc/group'.
#   - if match line does not exist:
#       - print that does not exist.

# Function 'cpSkel'
# - This function copies everything in '/etc/skel/' directory to the given directory.
cpSkel() {
    local home=$1
    if [[ -d $home ]]; then
        cp -r /etc/skel/. "${home}/"
    fi
}
# It takes the first parameter in a local variable 'home'.
# It checks if the directory 'home' exists:
# - if so, copy files from the path '/etc/skel/' to 'home' directory
#  - -r: recursively copy frome the folder.
#  - .: everything in the directory 'etc/skel'

# Initial checking for error handling. 
# - check if the user run this script with sudo previlege.
# - check if any option is given
# - check if options start with '-'. 
if [[ "$(id -u)" -ne 0 ]]; then
    echo "sudo privilege is required to run this script!"
    exit 1
elif [[ $# -eq 0 ]]; then
    echo "Options must be provided!"
    echo
    echo "To create a user:"
    echo "  -u: MANDATORY option. create a user name [USERNAME]"
    echo "      MANDATORY argument [USERNAME]"
    echo "      [USERNAME] must be unique"
    echo "  -s: MANDATORY option. specify a shell type [SHELLTYPE]"
    echo "      MANDATORY argument [SHELLTYPE]"
    echo "      [SHELLTYPE] must be completed"
    echo
    echo "To add user to additional groups:"
    echo "  -g: OPTIONAL option. add user to group [GROUPNAME]"
    echo "      MANDATORY argument [GROUPNAME]"
    echo "      Multiple [GROUPNAMES] are accepted"
    echo
    exit 1
elif [[ $@ != -* ]]; then
    echo "Options must be started with '-'!"
    echo
    echo "To create a user:"
    echo "  -u: MANDATORY option. create a user name [USERNAME]"
    echo "      MANDATORY argument [USERNAME]"
    echo "      [USERNAME] must be unique"
    echo "  -s: MANDATORY option. specify a shell type [SHELLTYPE]"
    echo "      MANDATORY argument [SHELLTYPE]"
    echo "      [SHELLTYPE] must be completed"
    echo
    echo "To add user to additional groups:"
    echo "  -g: OPTIONAL option. add user to group [GROUPNAME]"
    echo "      MANDATORY argument [GROUPNAME]"
    echo "      Multiple arguments [GROUPNAMES] are accepted"
    echo
    exit 1
fi
# if the script run without sudo previlege:
# - by checking the user id of who execute the script is 0 (always reserved for a root user) or else.
# - print that user need sudo privilege.
# - exit script with exit code 1.
# else if check if no options are given: 
# - by cheking number of given parameter is 0 or not
# - print that option should be provided.
# - print option usage guide.
# - exit script with exit code 1.
# else if given parameter does not follow correct syntax:
# - which means that does not start with '-'
# - print that option format is wrong.
# - print option usage guide.
# - exit script with exit code 1.

# Give users option to check essentiol steps with functions.
# - available user name, valid shell type, available group names.
# Provide default error handling with getopts and case.
# reference:
# - https://stackoverflow.com/questions/11279423/bash-getopts-with-multiple-and-mandatory-options
# - https://www.reddit.com/r/bash/comments/n8s7o5/use_getopts_to_parse_option_with_multiple_values/
userFlag=false
shellFlag=false
while getopts "u:s:g:" opt; do
    case $opt in
        u)
            checkUserName "${OPTARG}" || exit 1
            userFlag=true
        ;;
        s)
            checkShell "${OPTARG}" || exit 1
            shellFlag=true
        ;;
        g)
            groups+=( "$OPTARG" )
            while [[ ${!OPTIND} && ${!OPTIND} != -* ]]; do
                groups+=("${!OPTIND}")
                ((OPTIND++))
            done
            checkGroups "${groups[@]}" || exit 1
        ;;
        ?)
            exit 1
        ;;  
    esac
done
if [[ $userFlag == false && $shellFlag == false ]]; then 
    echo "option '-u' and '-s' are mandatory!"
    exit 1
elif [[ $userFlag == false ]]; then
    echo "option '-u' is mandatory!"
    exit 1
elif [[ $shellFlag == false ]]; then
    echo "option '-s' is mandatory!"
    exit 1
fi
# set variable 'userFlag' and 'shellFlag' false.
# use 'getopts' and give three options 'u', 's' and 'g'. make all options require arguments with ':'.
# - for the case the option is 'u'
#   - Call the function 'checkUserName' with 'OPTARG' as a parameter. if it returns 1(false) then exit with exitcode 1.
#   - if not, update 'userFlag' to true.
# - for the case the option is 's'
#   - Call the function 'checkShell' with 'OPTARG' as a parameter. if it returns 1(false) then exit with exitcode 1.
#   - if not, update 'shellFlag' to true.
# - for the case the option is 'g'
#   - adds the value of 'OPTARG' to the 'groups' array.
#   - it loops through 'OPTIND' that come after the options that getopts has already processed.
#       - !OPTIND: references the value at the index specified by 'OPTIND'.
#   - and that does not start with '-', which means arguments but not options.
#       - add that 'OPTIND' to 'groups'
#       - add 1 to 'OPTIND'
#   - Call the function 'checkGroups' with the items int an array 'groups'. if it returns 1(false) then exit with exitcode 1.
# - for the any other options:
# - It will generate default error messages and exit with exit code 1.
# if 'userFlag' is false and 'shellFlag' is false:
# - which means option 'u' and 's' are not called within getopts.
# - print that those options are mandatory and then exit with exitcode 1.
# else if 'userFlag' is false:
# - print that option is mandatory and then exit with exitcode 1.
# else if 'shellFlag' is false:
# - print that option is mandatory and then exit with exitcode 1.

# Run script
# Call the function 'checkId' to find and store available user id to the variable 'userId'
# check if a variable 'userName' is not null and a variable 'userId' is not null and a variable 'userShell' is not null:
# - this means all of those three functions were called without faliure.
#   - Call the function 'addUser' to add user with the values of the variables.
#   - Call the function 'mkGroup' to create a new user's default group.
#       - if it returns 1, print error messeage and then exit script. 
#   - Call the function 'mkHome' to create a new user's home directory.
#   - Call the function 'cpSkel' to copy given files to the 'userHome' directory.
#   - Call the function 'chownDir' to change ownership of user's home path.
#       - to change everything's onwership in the path, call this function as the last step. 
#       - if it returns 1, print error messeage and then exit script. 
#   - check if 'userGroups' is greater than 0:
#       - this means user provided additional groups info that they want to add.
#       - Call the function 'addGroups' with 'userName' and the array 'userGroups' to add the user into the given group names.
#   - print that a new user account created with a new user information.
#       - check if 'userGroups' is greater than 0:
#           - print userGroups + default group in 'added group' field.
#       - if not:
#           - print only default group in 'added group' field.
#   - require user to create password by using 'passwd'
#   - make a loop for user try to set a password until success.
#       - so that users will not fail to set password by accidentally type different passwords twice.
#       - do loop while 'passwdSet' variable false
#       - when passwd 'userName' success, update 'passwdSet' variable true.
# - if not all variables 'userName', 'userId', 'userShell' have values:
#   - print that information is incorrect and exit script with exitcode 1.
checkId
if [[ -n "${userName}" && -n "${userId}" && -n "${userShell}" ]]; then
    addUser "${userName}" "${userId}" "${userShell}"
    mkGroup "${userName}" "${userId}" || { exit 1; }
    mkHome "${userHome}"
    cpSkel "${userHome}"
    if [[ ${#userGroups[@]} -gt 0 ]]; then
        addGroups "$userName" "${userGroups[@]}"
    fi
    chownDir "${userName}" "${userHome}" || { exit 1; }
    echo "a new user account has been successfully created."
    echo
    echo "User    Name: ${userName}"
    echo "User      ID: ${userId}"
    echo "Group     ID: ${userId}"
    echo "Shell   Type: ${userShell}"
    echo "User    Home: ${userHome}"
    if [[ ${#userGroups[@]} -gt 0 ]]; then
        echo "Added Groups: ${userGroups[@]} ${userName}"
    else
        echo "Added Groups: ${userName}"
    fi
    echo
    passwdSet=false
    while [[ "$passwdSet" = false ]]; do
        echo "Please make a password!"
        if passwd "${userName}"; then
            echo "Password set successfully!"
            passwdSet=true
        else 
            echo "Password setup failed. Please try again."
        fi
    done
else
    echo "incorrect information!"
    exit 1
fi