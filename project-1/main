#!/bin/bash

# 'main' script does:
#   - It will call two scripts:
#     - the script 'configRepo' does: 
#       - cloning git repository and creating symbolic links.
#     - the script 'installPackage' does: 
#       - install packages list from the given file.
#   - User can call each script with following options:
#     -i: install packages in the file.
#        - argument should be provided for the filename.
#     -c: clone the repository and config the symbolic links. 
#        - argument should be provided for the username.

# Initial checking for error handling.
# check if all necessary script files exist in current directory.
# check if the user run this script with sudo previlege.
# check if any option is given
# check if options start with '-'. 
# reference:
# - https://unix.stackexchange.com/questions/50563/how-can-i-detect-that-no-options-were-passed-with-getopts
# - https://stackoverflow.com/questions/18215973/how-to-check-if-running-as-root-in-a-bash-script
if [[ ! -f "./configRepo" || ! -f "./installPackage" || ! -f "./main" ]]; then
    echo "files 'configRepo', 'installPackage' and 'main' must be presented in the curreunt directory!"
    echo "move into the directory that contains those files before running the script."
    exit 1
elif [[ "$(id -u)" -ne 0 ]]; then
    echo "sudo privilege is required to run this script!"
    exit 1
elif [[ $# -eq 0 ]]; then
    echo "Options must be provided!"
    echo
    echo "To install packages:"
    echo "  -i: MANDATORY option. install packages in the file [FILENAME]"
    echo "      MANDATORY argument [FILENAME]"
    echo
    echo "To clone repository and to configure symbolic links:" 
    echo "  -c: MANDATORY option. clone git repository to the [USERNAME]'s directory and create symbolic links"
    echo "      MANDATORY argument [USERNAME]"
    echo
    exit 1
elif [[ $@ != -* ]]; then
    echo "Options must start with '-'!"
    echo "To install packages:"
    echo "  -i: MANDATORY option. install packages in the file [FILENAME]"
    echo "      MANDATORY argument [FILENAME]"
    echo
    echo "To clone repository and to configure symbolic links:" 
    echo "  -c: MANDATORY option. clone git repository to the [USERNAME]'s directory and create symbolic links"
    echo "      MANDATORY argument [USERNAME]"
    echo
    exit 1
fi
# if the script 'configRepo' or 'installPackage' or 'main' is not presented in the currunt directory.
# - print that user need to locate them in the current folder.
# - exit script with exit code 1.
# if the script run without sudo previlege:
# - by checking the user id of who execute the script is 0 (always reserved for a root user) or else.
# - if not, print that user need sudo privilege.
# - exit script with exit code 1.
# else if no options are given: 
# - by cheking number of given parameter is 0 or not
# - print that option should be provided.
# - print option usage guide.
# - exit script with exit code 1.
# else if given parameter does not follow correct syntax:
# - which means that does not start with '-'
# - print that option format is wrong.
# - print option usage guide.
# - exit script with exit code 1.

# Give users option to run script that they want.
# Provide default error handling with getopts and case.
while getopts "i:c:" opt; do
  case $opt in
    i)
        source installPackage "${OPTARG}" || exit 1
    ;;
    c)
        source configRepo "${OPTARG}" || exit 1
    ;;
    ?)
        exit 1
    ;;  
  esac
done
# use 'getopts' to give two options 'i' and 'c'.
# - make all of them require arguments with ':'.
# - for the case the option is 'i':
#   - Call the script 'installPackage' and run it with provided argument as a file name.
#   - if calling script does not success, exit script with exit code 1.
#   - each error cases will be explained within the script 'installPackage'
# - for the case the option is 'c':
#   - Call the script 'ConfigRepo' and run it with provided argument as a user name.
#   - if calling script does not success, exit script with exit code 1.
#   - each error cases will be explained within the script 'ConfigRepo'
# - for the any other one letter options:
# - It will generate default error messages and exit with exit code 1.
