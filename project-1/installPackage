#!/bin/bash

# 'installPackage' script does:
#   - It will provide a funtion to install packages from a file that is provided as an argument.

# 'packageList' is a file that will store all the installed packages list.
#   - It will be used to check what packages the user already had.
packageList="./packagesList"

# Function 'installPackages'
# - This function takes a parameter as a name of file contains list of packages to install.
# - it will update currently installed packages and it will compare each package in the list.
# - if the package is already installed, it will skip it, otherwise it will try to install it.
# - if the package does not exist, it will print that and keep going for the next item.
# reference:
# - https://wiki.archlinux.org/title/Pacman
# - https://www.digitalocean.com/community/tutorials/grep-command-in-linux-unix
# - https://medium.com/@linuxadminhacks/understanding-mapfile-command-in-linux-9a13a2e2008a
installPackages() {
    local fileName="$1"
    if [[ -f "${fileName}" ]]; then
      local lines=()
      pacman -Syuq --noconfirm
      pacman -Qq > "$packageList"
      mapfile -t lines < "${fileName}"
      for package in "${lines[@]}"; do
          if grep -qw "$package" "$packageList"; then
              echo "A package '${package}' already exists!"
          else
              pacman -Sq --noconfirm "$package"
              if [[ $? -eq 0 ]]; then
                  pacman -Qq > "$packageList"
                      if grep -qw "$package" "$packageList"; then
                          echo "A package '${package}' has been installed!"
                      else
                          echo "A package '${package}' installation failed!"
                      fi
              else
                  echo "A package '${package}' installation failed!"
              fi
          fi
      done
      rm -r "$packageList"
      else
      echo "File name '${fileName}' does not exist!"
      return 1
    fi
}
# It takes a parameter in a local array variable 'fileName'.
# It checks if the file 'fileName' exists.
# it creates an empty local array 'lines'
# It updates all the installed packages without confirmation steps and printing details.
#   -S: install and/or update packages.
#   -y: synchronize packages database.
#   -u: update all installed packages.
#   -q: quietly continue processes with only printing minimum information.
# It creates a text file named 'packageList' which means "./packagesList" and put contents of:
#   -Q: installed packages information
#   -q: minimize printing data (so only names of packages will be included)
# It stores each line from the file 'fileName' into the array variable 'lines'.
# - mapfile: read file as an array
# - t: delete special line changing characters if exists. (e.g. \n) 
# - It loops through each item in the 'lines' array.
#   - If the name of 'item' exist in the 'packageList':
#     -q: 'grep' command prints output by default. '-q' option makes it not to.
#     -w: check only matches exaclty the same name (partial matches will not be included)
#     - Print that the package exists.
#   - else:
#     - it install the package name of 'item'.
#     - if the installation succeed (by checking the exit code of the previous step):
#       - update the list of installed packages file "packageList"
#       - if updated "packageList" included the 'item'.
#         - print that the item is installed.
#       - if not include:
#         - print that the installation failed.
#     - if the exit code of previous step(installing package) is not 0:
#       - print that the installation failed.
# - remove the file 'packageList'.
# if the file 'fileName' not exists:
# - print that does not exist and return 1 (false).

# Calling 'installPackages' function with positional parameter 1.
installPackages $1


