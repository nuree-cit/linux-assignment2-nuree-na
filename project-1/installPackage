#!/bin/bash

# 'installPackage' script does:
#   - It will install packages.
#   - User can install basic packages with option '-b'.
#     - Basic packages: git, kakoune, and tmux.
#   - User can also install anoter package as an argument provided with '-a' option.

# reference:
# - https://wiki.archlinux.org/title/Pacman
# - https://docs.linuxfoundation.org/lfx/project-control-center/v1-prior-version/tools/security/manage-false-positives/regular-expressions-cheat-sheet
# - https://www.digitalocean.com/community/tutorials/grep-command-in-linux-unix

# 'packages' array stores the list of basic pakages.
# 'addPackage' is an empty array that will be used to store a new package when it is needed.
# 'packageList' is a text file that stores all the installed packages list.
#   - It will be used to check what packages are installed.
packages=("git" "kakoune" "tmux")
addPackage=()
packageList="./packagesList.txt"

# Function 'packageInstall'
# - It takes parameters in a local array variable 'localpackages'.
# - It updates all the installed packages without confirmation steps and printing details.
#   -S: install and/or update packages.
#   -y: synchronize packages database.
#   -u: update all installed packages
#   -q: quietly continue processes without printing all information.
# - It creates a text file named 'packageList' which means "./packagesList.txt" and put content of:
#   -Q: installed packages information
#   -q: minimize printing data (so only include names of packages)

# - It loops through each item in the 'localpackages' array.
#   - If the name of 'item' exist in the 'packageList':
#     -q: 'grep' command prints output by default, make it not to.
#     -w: check only matches exaclty the same (not include partial matches)
#     - Print that the package exists.
#   - else:
#     - it install the package name of 'item'.
#     - if the installation succeed (by checking the exit code of the previous step):
#       - update the list of installed packages file "packageList"
#       - if updated "packageList" included the 'item'.
#         - print that the item is installed.
#       - if not include:
#         - print that the installation failed.
#     - if the exit code of previous step(installing package) is not 0:
#       - print that the installation failed.
# - remove the file 'packageList'.
packageInstall() {
  local localpackages=("$@")
  pacman -Syuq --noconfirm
  pacman -Qq > "$packageList"

  for package in "${localpackages[@]}"; do
    if grep -qw "$package" "$packageList"; then
      echo "A package '${package}' already exists!"
    else
      pacman -Sq --noconfirm "$package"
      if [[ $? -eq 0 ]]; then
        pacman -Qq > "$packageList"
        if grep -qw "$package" "$packageList"; then
          echo "A package '${package}' has been installed!"
        else
          echo "A package '${package}' installation failed!"
        fi
      else
      echo "A package '${package}' installation failed!"
      fi
    fi
  done
  rm -r "$packageList"
}

# Check if no options are given or something that doesn't follow option format is given:
#   - print guide messages.
if [[ $# -eq 0 || $@ != -* ]]; then
  echo "Options should be provided!"
  echo "-a: provide an additional package name you want to install as an argument."
  echo "-b: installing basic packages (git, kakoune, tmux)."
  exit 1
fi

# use 'getopts' and give two options 'a' and 'b'. make 'a' requires an argument with ':'.
# - for the case the option is 'a'
#   - add the option's argument to the empty list 'newPackage'
#   - and install it by calling 'packageInstall' function.
# - for the case the option is 'b'
#   - install basic packages in the 'packages' list by calling function packageInstall.
# - for the any other options:
# - It will generate default error messages and exit with exit code 1.
while getopts "a:b" opt; do
  case $opt in
    a)
      addPackage+=("${OPTARG}")
      packageInstall "${addPackage[@]}"
    ;;
    b)
      packageInstall "${packages[@]}"
    ;;
    ?)
      exit 1
    ;;  
  esac
done