#!/bin/bash

# 'installPackage' script does:
#   - It will install packages git, kakoune, and tmux by default.
#   - User can also install other packages with an arguments provided '-a' option.

# reference:
# - https://wiki.archlinux.org/title/Pacman

# 'packages' array stores the initial pakages that are required.
# 'packageList' will be a text file that stores all the installed packages list.
packages=("git" "kakoune" "tmux") 
packageList="./packagesList.txt"

# First, look for a required argument with an option '-a'.
# Add the argument to the list 'packages'.
# If different options is given, or argument is not given.
# - It will print "Invalid request!" and end with exitcode 1.
while getopts "a:" add; do
  case $add in
    a)
      packages+=("${OPTARG}")
    ;;
    *)
      echo "Invalid request!"
      exit 1
    ;;
  esac
done

# The function 'packageInstall' does:
# - It takes a parameter as a local variable 'localpackages'.
# - It creates a text file named 'packageList'
#   - Put a packages' name that currently installed.
# - It updates all the installed packages without confirmation step.
# - It loops through each item in the 'localpackages' array.
#   - If the name of 'item' exist in the 'packageList'.
#     - it print that package exists.
#   - If not exist:
#     - it install the item without confirmation step.
#     - if the installation success (by checking the exit code of previous step):
#       - update the "packageList"
#       - if updated "packageList" include the item.
#         - print that item is installed.
#       - if not include:
#         - print it failed.
#     - if the exit code is not 0:
#         - print it failed.
#   - remove the 'packageList' file.
packageInstall() {
  local localpackages=("$@")
  pacman -Qq > "$packageList"
  sudo pacman -Syu --noconfirm
  for package in "${localpackages[@]}"; do
    if grep -w "$package" "$packageList"; then
      echo "${package} already exists!"
    else
      sudo pacman -S --noconfirm "$package"
      if [[ $? -eq 0 ]]; then
        pacman -Qq > "$packageList"
        if grep -qw "$package" "$packageList"; then
          echo "${package} has been installed!"
        else
          echo "${package} installation failed!"
        fi
      else
      echo "${package} installation failed!"
      fi
    fi
  done
  rm -r "$packageList"
}

# Call the function 'packageInstall' with the updated list 'packages'
packageInstall "${packages[@]}"
